<?php
declare(strict_types=1);


namespace Era269\Microobject\Example\Domain;


use Era269\Microobject\AbstractMicroobject;
use Era269\Microobject\Example\Domain\Identifier\AutogeneratedIdentifier;
use Era269\Microobject\Example\Domain\Message\Notebook\Command\CreateNotebookCommand;
use Era269\Microobject\Example\Domain\Message\Notebook\NotebookMessageInterface;
use Era269\Microobject\Example\Domain\Message\Notebook\Query\GetNotebookQuery;
use Era269\Microobject\Example\Domain\Notebook\NotebookFactoryInterface;
use Era269\Microobject\Example\Domain\Notebook\NotebookRepositoryInterface;
use Era269\Microobject\IdentifierInterface;
use Era269\Microobject\Message\Response\BaseResponse;
use Era269\Microobject\Message\Response\PositiveEmptyResponse;
use Era269\Microobject\MessageInterface;
use Era269\Microobject\Traits\ApplyEventTrait;
use Psr\EventDispatcher\EventDispatcherInterface;

final class NotebookCollection extends AbstractMicroobject implements NotebookCollectionInterface
{
    use ApplyEventTrait;

    private IdentifierInterface $id;

    private function __construct(
        EventDispatcherInterface $eventDispatcher,
        private NotebookRepositoryInterface $notebookRepository,
        private NotebookFactoryInterface $notebookFactory,
    )
    {
        parent::__construct($eventDispatcher);
        $this->id = AutogeneratedIdentifier::generate();
    }

    public static function create(
        EventDispatcherInterface $eventDispatcher,
        NotebookRepositoryInterface $repository,
        NotebookFactoryInterface $notebookFactory
    ): self
    {
        return self::restore($eventDispatcher, $repository, $notebookFactory);
    }

    public static function restore(
        EventDispatcherInterface $eventDispatcher,
        NotebookRepositoryInterface $repository,
        NotebookFactoryInterface $notebookFactory
    ): self
    {
        return new self(
            $eventDispatcher,
            $repository,
            $notebookFactory
        );
    }

    /**
     * @inheritDoc
     */
    public function getNotebook(GetNotebookQuery $query): MessageInterface
    {
        return new BaseResponse(
            $this->notebookRepository->get(
                $query->getNotebookId()
            )
        );
    }

    public function attachNotebook(CreateNotebookCommand $command): MessageInterface
    {
        $this->notebookFactory->createNotebook(
            $command
        );

        return new PositiveEmptyResponse();
    }

    public function processNotebookMessage(NotebookMessageInterface $message): MessageInterface
    {
        $notebook = $this->notebookRepository->get(
            $message->getNotebookId()
        );

        return $notebook->process($message);
    }

    public function getId(): IdentifierInterface
    {
        return $this->id;
    }

    protected function getNormalized(): array
    {
        return [];
    }
}
